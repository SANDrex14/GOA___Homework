# მეხსიერება და ვარიაბლები
# აღწერა: მეხსიერება პროგრამირებაში იმ სადგომი სივრცეა, სადაც მონაცემები ინახება. ვარიაბლები გამოიყენება მონაცემების შენახვისთვის, რაც საშუალებას გვაძლევს მიაწვდოს და შეცვალოს მონაცემები პროგრამაში.
# მაგალითი:
# python

# # ვარიაბლების განსაზღვრა
# სახელი = "ალისი"
# ასაკი = 30
# # ვარიაბლების გამოყენება
# print(f"სახელი: {სახელი}, ასაკი: {ასაკი}")
# ტექსტური მონაცემები
# აღწერა: ტექსტური მონაცემები წარმოადგენს სტრიქონებს, რაც ხასიათების სექვენციაა.
# მაგალითი:
# python
# Copy code
# ტექსტი = "გამარჯობა, მსოფლიო!"
# print(text.upper())  # გამომავალი: გაწვდილი, მსოფლიო!
# რიცხვითი მონაცემები
# აღწერა: რიცხვითი მონაცემები მოიცავს целულარ და ფლოტინგ-პოინტ რიცხვებს.
# მაგალითი:
# python
# Copy code
# რიცხვი = 42
# პი = 3.14159
# print(რიცხვი + პი)  # გამომავალი: 45.14159
# თამაშის შეტყობინებები
# აღწერა: თამაშის შეტყობინებები გამოიყენება თამაშის მონაცემების ან ინსტრუქციების გასაწვდელად.
# მაგალითი:
# python
# Copy code
# ქულა = 100
# print(f"თქვენი ქულა: {ქულა}")
# შოპინგის ფასები
# აღწერა: ფასების მართვა ჩვეულებრივ შეიცავს რიცხვით მონაცემებს და ფორმატირებას.
# მაგალითი:
# python
# Copy code
# ფასი = 19.99
# print(f"ფასი: ${ფასი:.2f}")  # გამომავალი: ფასი: $19.99
# სემესტრის შეფასება
# აღწერა: შეფასებების გამოთვლა ხშირად მოიცავს რიცხვით მონაცემებს და ოპერაციებს, როგორიცაა საშუალო არითმეტიკულობა.
# მაგალითი:
# python
# Copy code
# შეფასებები = [85, 90, 78, 92]
# საშუალო_შეფასება = sum(შეფასებები) / len(შეფასებები)
# print(f"შესაბამისი საშუალო: {საშუალო_შეფასება:.2f}")
# ბილეთის მიმდევრობა
# აღწერა: ბილეთების მიმდევრობა მოიცავს მონაცემების მართვას და პროცესინგს.
# მაგალითი:
# python
# Copy code
# ფრენის_სტატუსი = "დროულად"
# print(f"ფრენის სტატუსი: {ფრენის_სტატუსი}")
# ფინანსური აპლიკაცია
# აღწერა: ფინანსური აპლიკაცია შესაძლოა მოიცავდეს ტრანზაქციებს, ბიუჯეტირებას და ფინანსური გამოთვლებს.
# მაგალითი:
# python
# Copy code
# ბალანსი = 1000.00
# ხარჯი = 250.75
# ბალანსი -= ხარჯი
# print(f"დარჩენილი ბალანსი: ${ბალანსი:.2f}")
# შესვლების ტურნირი
# აღწერა: შესვლების ტურნირში მოყვება მოთამაშეების, თამაშების და ქულების მართვა.
# მაგალითი:
# python
# Copy code
# მოთამაშეები = ["მოთამაშე 1", "მოთამაშე 2"]
# ქულები = {"მოთამაშე 1": 1, "მოთამაშე 2": 0}
# print(ქულები)
# მონაცემთა ტიპების შემოწმება
# აღწერა: მონაცემთა ტიპების შემოწმება უზრუნველყოფს, რომ ვარიაბლები გამოტანილ ტიპში იყვნენ.
# მაგალითი:
# python
# Copy code
# მნიშვნელობა = 42
# print(isinstance(მნიშვნელობა, int))  # გამომავალი: True
# მონაცემთა კონვერტაცია
# აღწერა: მონაცემთა ტიპების კონვერტაცია ნიშნავს ერთ ტიპში გადაყვანას სხვა ტიპზე.
# მაგალითი:
# python
# Copy code
# რიცხვი = "123"
# გარდასახული_რიცხვი = int(რიცხვი)
# print(გარდასახული_რიცხვი + 1)  # გამომავალი: 124
# შედარების ოპერაციები
# აღწერა: შედარების ოპერაციები გამოიყენება მნიშვნელობების შედარებისთვის.
# მაგალითი:
# python
# Copy code
# ა = 5
# ბ = 10
# print(ა < ბ)  # გამომავალი: True
# ლოგიკური ოპერაციები
# აღწერა: ლოგიკური ოპერაციები მოიცავს AND, OR და NOT ოპერაციებს.
# მაგალითი:
# python
# Copy code
# x = True
# y = False
# print(x and y)  # გამომავალი: False
# for ლუპები
# აღწერა: for ლუპები ართმევენ ელემენტების სექვენციას.
# მაგალითი:
# python
# Copy code
# for i in range(5):
#     print(i)  # გამომავალი: 0 1 2 3 4
# while ლუპები
# აღწერა: while ლუპები გაგრძელდება, როგორც ხანგრძლივი მდგომარეობა ჭეშმარიტია.
# მაგალითი:
# python
# Copy code
# count = 0
# while count < 5:
#     print(count)
#     count += 1
# კონდიციური განაცხადები
# აღწერა: კონდიციური განაცხადები (if, elif, else) გამოიყენება გადაწყვეტილების მიღებისათვის.
# მაგალითი:
# python
# Copy code
# რიცხვი = 10
# if რიცხვი > 0:
#     print("დასაშვებია")
# else:
#     print("არ არის დასაშვებ")
# სიაების მართვა
# აღწერა: სიები არის გაწვდილი კოლექციები ელემენტების.
# მაგალითი:
# python
# Copy code
# ხილები = ["მარწყვი", "ბანანი", "ჩერი"]
# print(ხილები[1])  # გამომავალი: ბანანი
# ინდექსირების გამოყენება
# აღწერა: ინდექსირება გამოაქვს ელემენტები სიიდან მათი პოზიციის მიხედვით.
# მაგალითი:
# python
# Copy code
# სია = [1, 2, 3, 4]
# print(სიი[2])  # გამომავალი: 3
# ჭრა (Slicing)
# აღწერა: ჭრა გამოაქვს სიიდან ნაწილების.
# მაგალითი:
# python
# Copy code
# სია = [1, 2, 3, 4, 5]
# print(სიი[1:4])  # გამომავალი: [2, 3, 4]
# ფუნქციები
# აღწერა: ფუნქციები არის განმეორებადი კოდის ბლოკები, რომლებიც აკეთებენ გარკვეულ დავალებას.
# მაგალითი:
# python
# Copy code
# def მიაწვდოს(სახელი):
#     return f"გამარჯობა, {სახელი}!"

# print(მიაწვდოს("ალისი"))  # გამომავალი: გამარჯობა, ალისი!
# ფუნქციის არგუმენტები
# აღწერა: ფუნქციის არგუმენტები არის მნიშვნელობები, რომლებიც გადაეცემა ფუნქციას.
# მაგალითი:
# python
# Copy code
# def დაამატოს(ა, ბ):
#     return ა + ბ

# print(დაამატოს(5, 3))  # გამომავალი: 8
# კომბინირებული შედარებითი და ლოგიკური ოპერაციები
# აღწერა: კომბინირებული შედარებითი და ლოგიკური ოპერაციები საშუალებას გაწვდოს მრავალჯერადი პირობების შეწყვანვა.
# მაგალითი:
# python
# Copy code
# x = 5
# y = 10
# print(x < y and y < 15)  # გამომავალი: True
# ფიტნეს მიზნები!
# აღწერა: ფიტნეს მიზნების მართვა მოიცავს მონაცემების დამუშავებას, როგორიცაა ნაბიჯების გამოთვლა და მიზნების მიღწევა.